<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-4.1.xsd   
          http://www.springframework.org/schema/context   
          http://www.springframework.org/schema/context/spring-context-4.1.xsd   
          http://www.springframework.org/schema/aop   
          http://www.springframework.org/schema/aop/spring-aop-4.1.xsd   
          http://www.springframework.org/schema/tx    
          http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
          http://www.springframework.org/schema/task
          http://www.springframework.org/schema/task/spring-task.xsd">

	<context:component-scan base-package="com.hhly.*" />

	<bean id="propertyConfigurer"
		class="com.sgfm.base.des.DecryptPropertyPlaceholderConfigurer">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:db.properties</value>
				<value>classpath:redis-config.properties</value>
				<value>classpath:sys.properties</value>
				<value>classpath:sys_dynamic.properties</value>
				<value>classpath:rabbitmq.properties</value>
			</list>
		</property>
	</bean>


	<!-- 注入属性文件 -->
	<bean id="configProperties"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath:redis-config.properties</value>
			</list>
		</property>
	</bean>

	<!--允许多个批量处理配置，不加这个配置，批量更新不会成功 -->
	<bean id="myWallConfig" class="com.alibaba.druid.wall.WallConfig">
		<property name="multiStatementAllow" value="true" />
	</bean>

	<!--重新定义过滤器，允许多个批量处理配置 默认是wall -->
	<bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
		<property name="config" ref="myWallConfig" />
	</bean>


	<!-- 阿里 druid 数据库连接池 add by scott 2017-1-12 start -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close" init-method="init">
		<!-- 数据库基本信息配置 -->
		<property name="url" value="${db_url}" />
		<property name="username" value="${db_username}" />
		<property name="password" value="${db_password}" />
		<property name="driverClassName" value="${driverClassName}" />
		<!-- <property name="filters" value="stat,wall" /> -->
		<!-- 最大并发连接数 -->
		<property name="maxActive" value="${maxActive}" />
		<!-- 初始化连接数量 -->
		<property name="initialSize" value="${initialSize}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${maxWait}" />
		<!-- 最小空闲连接数 -->
		<property name="minIdle" value="${minIdle}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
		<!-- 用来检测连接是否有效的sql -->
		<property name="validationQuery" value="${validationQuery}" />
		<!-- 是否缓存preparedStatement -->
		<property name="poolPreparedStatements" value="${poolPreparedStatements}" />
		<!-- 建议配置为true，不影响性能，并且保证安全性 -->
		<property name="testWhileIdle" value="${testWhileIdle}" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 建议false -->
		<property name="testOnBorrow" value="${testOnBorrow}" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 建议为false -->
		<property name="testOnReturn" value="${testOnReturn}" />
		<!-- 在Druid中，不会存在Oracle下PSCache占用内存过多的问题， 可以把这个数值配置大一些 -->
		<property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />
		<!-- 对于长时间不使用的连接强制关闭 -->
		<property name="removeAbandoned" value="${removeAbandoned}" />
		<!-- 超过30分钟开始关闭空闲连接 -->
		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
		<!-- 关闭 abanded 连接时输出错误日志 -->
		<property name="logAbandoned" value="${logAbandoned}" />

		<property name="filters" value="stat" />
		<!-- JDBC Proxy Driver -->
		<property name="proxyFilters">
			<list>
				<ref bean="wall-filter" />
			</list>
		</property>
	</bean>


	<!-- 阿里 druid 数据库连接池 add by scott 2017-1-12 end -->

	<!-- define the SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- scan for mappers and let them be autowired -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.hhly.paycore.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>



	<!-- 事务管理器 start -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 事务管理器 end -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

	<!-- 定义事务配置 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 读取数据方法，一般采用只读事务 -->
			<tx:method name="*" propagation="SUPPORTS" read-only="true" />
			<!--以下方法，如save，update，insert等对数据库进行写入操作的方法，当产生Exception时进行回滚 -->
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRES_NEW" />
			<!--2017-06-11，修改为抛出异常都进行回滚 -->
			<tx:method name="*" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>

	<!-- 指定事务切入点 -->
	<aop:config>
		<aop:pointcut id="serviceOperation"
			expression="execution(* com.hhly.paycore.service.*.*(..)) and execution(* com.hhly.paycore.*.service.*.*(..))" />
		<aop:advisor pointcut-ref="serviceOperation" advice-ref="txAdvice" />
	</aop:config>


	<!-- 引入redis属性配置文件 -->
	<import resource="redis-config.xml" />
	<!-- 引入rabbitmq.xml属性配置文件 -->
	<import resource="rabbitmq.xml" />
	<!-- 引入redisson.xml属性配置文件 -->
	<import resource="redisson.xml" />

	<!-- redis aop 处理缓存 add by scott 2017-02-04 -->
	<!-- redis缓存切面 -->
	<bean id="ReadCacheAspect" class="com.hhly.redis.aop.ReadThroughAssignAOP" />
	<bean id="DeleteCacheAspect" class="com.hhly.redis.aop.DeleteThroughAssignAOP" />
	<bean id="UpdateCacheAspect" class="com.hhly.redis.aop.UpdateThroughAssignAOP" />

	<!-- <bean id="payLogAspect" class="com.hhly.usercore.pay.common.PayLogAdvice" 
		/> -->
	<bean id="validateAspect" class="com.hhly.skeleton.base.valid.aop.ParameterVaildAop" />

	<!-- 切面申明配置 -->
	<aop:aspectj-autoproxy expose-proxy="true"
		proxy-target-class="true">
		<aop:include name="ReadCacheAspect" />
		<aop:include name="DeleteCacheAspect" />
		<aop:include name="UpdateCacheAspect" />
		<!-- <aop:include name="payLogAspect" /> -->
		<aop:include name="validateAspect" />
	</aop:aspectj-autoproxy>


 <!-- 异步线程池 -->
    <bean id="scanExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <!-- 核心线程数 -->
        <property name="corePoolSize" value="100" />
        <!-- 最大线程数 -->
        <property name="maxPoolSize" value="500" />
        <!-- 队列最大长度 >=mainExecutor.maxSize -->
        <property name="queueCapacity" value="10000" />
        <!-- 线程池维护线程所允许的空闲时间 -->
        <property name="keepAliveSeconds" value="60000" />
        <!-- 线程池对拒绝任务(无线程可用)的处理策略 -->
        <property name="rejectedExecutionHandler">
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
        </property>
    </bean>

</beans>